#!/usr/bin/env bash
# ==================================================================================================
# DPS Bootstrap - Nix Setup Helper Functions
# ==================================================================================================

# =============================================================================
# REPOSITORY MANAGEMENT
# =============================================================================

clone_repository() {
    local repo_url="$1"
    local target_path="$2"
    local github_token="$3"
    
    log "Cloning repository to $target_path"
    
    # Setup git credentials if token provided
    if [[ -n "$github_token" ]]; then
        git config --global credential.helper store
        echo "https://token:${github_token}@github.com" > ~/.git-credentials
    fi
    
    # Clone repository quietly
    mkdir -p "$(dirname "$target_path")"
    if git clone --quiet "$repo_url" "$target_path" 2>/dev/null; then
        success "Repository cloned successfully"
    else
        error "Failed to clone repository: $repo_url"
    fi
    
    # Cleanup credentials
    if [[ -n "$github_token" ]]; then
        rm -f ~/.git-credentials
        git config --global --unset credential.helper
    fi
}

# =============================================================================
# NIXOS CONFIGURATION GENERATION
# =============================================================================

generate_hardware_config() {
    local hostname="$1"
    
    log "Generating hardware configuration"
    
    # Generate hardware config locally (stays in /etc/nixos/)
    nixos-generate-config --root /mnt --dir /mnt/etc/nixos
    
    # Hardware config stays local, never moved to flake repository
    log "Hardware configuration generated at /mnt/etc/nixos/hardware-configuration.nix"
}

create_deploy_vm_config() {
    local hostname="$1"
    local use_encryption="$2"
    
    log "Creating Deploy VM configuration"
    
    # Create local configuration that uses deployVM config from bootstrap repo
    cat > "/mnt/etc/nixos/configuration.nix" << EOF
# $hostname - Deploy VM Configuration (Generated by DPS Bootstrap)
{ config, lib, pkgs, ... }:

{
  imports = [
    # Hardware config (local only)
    ./hardware-configuration.nix
    # Deploy VM configuration from bootstrap repository
    /tmp/dps_bootstrap/deployVM/configuration.nix
  ];

$(create_deploy_network_config "$hostname")

  # Enable flakes
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Bootstrap phase marker
  environment.etc."bootstrap-phase".text = "deploy-vm";
  
  # Encryption settings
  homelab.encryption.enable = $([ "$use_encryption" == "y" ] && echo "true" || echo "false");
  
  system.stateVersion = "$(nixos-version | cut -d. -f1-2)";
}
EOF
}

create_node_config() {
    local role="$1"
    local hostname="$2"
    local use_encryption="$3"
    local private_repo_path="$4"
    
    log "Creating managed node configuration"
    
    # Create local configuration that imports role template from private flake
    cat > "/mnt/etc/nixos/configuration.nix" << EOF
# $hostname - Managed Node Configuration (Generated by DPS Bootstrap)
{ config, lib, pkgs, ... }:

{
  imports = [
    # Hardware config (local only)
    ./hardware-configuration.nix
    # Role template from private flake repository
    $private_repo_path/templates/${role}.nix
  ];

$(create_node_network_config "$hostname")

  # Enable flakes
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Bootstrap phase marker
  environment.etc."bootstrap-phase".text = "managed-node";
  
  # Encryption settings
  homelab.encryption.enable = $([ "$use_encryption" == "y" ] && echo "true" || echo "false");
  
  system.stateVersion = "$(nixos-version | cut -d. -f1-2)";
}
EOF

    # Create dps-update script for this VM
    mkdir -p "/mnt/usr/local/bin"
    cat > "/mnt/usr/local/bin/dps-update" << 'EOF'
#!/usr/bin/env bash
set -euo pipefail

echo "ðŸ”„ Updating DPS managed node configuration..."

cd /etc/nixos-flake
git pull origin main

echo "ðŸ”§ Rebuilding system configuration..."
nixos-rebuild switch \
  --flake .#default \
  --override-input hardware "path:/etc/nixos/hardware-configuration.nix"

echo "âœ… Update complete!"
EOF

    chmod +x "/mnt/usr/local/bin/dps-update"
}

# =============================================================================
# NIXOS INSTALLATION
# =============================================================================

install_deploy_vm() {
    local hostname="$1"
    
    log "Installing Deploy VM"
    
    # Install using standard nixos-install (no flake needed for Deploy VM)
    nixos-install --no-root-passwd
}

install_managed_node() {
    local hostname="$1"
    local private_repo_path="$2"
    
    log "Installing managed node with hardware override"
    
    # Install using default configuration with hardware override
    nixos-install --no-root-passwd \
      --flake "$private_repo_path#default" \
      --override-input hardware "path:/mnt/etc/nixos/hardware-configuration.nix"
}
