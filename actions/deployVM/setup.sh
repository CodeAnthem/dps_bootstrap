#!/usr/bin/env bash
# ==================================================================================================
# DPS Project - Bootstrap NixOS - Deploy VM Action
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Date:          Created: 2025-10-17 | Modified: 2025-10-26
# Description:   Deploy VM management hub setup with deployment tools and infrastructure management
# Feature:       LUKS encryption, SOPS integration, SSH orchestration, mass deployment capabilities
# Author:        DPS Project
# ==================================================================================================

# =============================================================================
# ACTION METADATA
# =============================================================================
# readonly ACTION_VERSION="1.0.0"

# =============================================================================
# ACTION CONFIGURATION
# =============================================================================
# @AI - This is  where the setup setups all its required configuration
action_config() {
    # Set context for action-specific vars
    PRESET_CONTEXT="deploy"
    
    # Declare action-specific fields
    nds_configurator_var_declare GIT_REPO_URL \
        display="Private Git Repository" \
        input=url \
        default="https://github.com/user/repo.git" \
        required=true

    nds_configurator_var_declare DEPLOY_SSH_KEY_PATH \
        display="Deploy SSH Key Path" \
        input=path \
        default="/root/.ssh/deploy_key" \
        required=true
    
    nds_configurator_var_declare DEPLOY_TOOLS_PATH \
        display="Deploy Tools Installation Path" \
        input=path \
        default="~/deployTools"
    
    # Clear context
    PRESET_CONTEXT=""

    # Set default values for preset vars (if not already set by env)
    # Access - Admin user and SSH
    nds_configurator_config_set "ADMIN_USER" "admin"
    nds_configurator_config_set "SUDO_PASSWORD_REQUIRED" "true"
    nds_configurator_config_set "SSH_ENABLE" "true"
    nds_configurator_config_set "SSH_PORT" "22"
    nds_configurator_config_set "SSH_USE_KEY" "true"
    nds_configurator_config_set "SSH_KEY_TYPE" "ed25519"
    nds_configurator_config_set "SSH_KEY_PASSPHRASE" "false"

    # Network
    nds_configurator_config_set "NETWORK_METHOD" "dhcp"

    # Disk & Encryption
    nds_configurator_config_set "ENCRYPTION" "true"
    nds_configurator_config_set "ENCRYPTION_KEY_METHOD" "urandom"
    nds_configurator_config_set "ENCRYPTION_KEY_LENGTH" "64"

    # Boot
    nds_configurator_config_set "BOOTLOADER" "systemd-boot"

    # Security
    nds_configurator_config_set "SECURE_BOOT" "false"
    nds_configurator_config_set "FIREWALL_ENABLE" "true"
    nds_configurator_config_set "HARDENING_ENABLE" "true"
    nds_configurator_config_set "FAIL2BAN_ENABLE" "true"
    
    # Quick Setup
    nds_configurator_config_set "COUNTRY" ""
}

# @AI - Optional function to return fields (similar to deploy_get_active_fields)
# action_config_get_active() {
#     echo "GIT_REPO_URL"
#     echo "DEPLOY_SSH_KEY_PATH"
# }

# @AI - Optional function to validate configuration (similar to deploy_validate_extra)
# action_config_validate() {
#     return 0
# }

# =============================================================================
# GENERATE OVERRIDES
# =============================================================================
action_generate_overrides() {
    local hostname timezone locale keyboard_layout keyboard_variant
    
    hostname=$(nds_configurator_config_get "HOSTNAME")
    timezone=$(nds_configurator_config_get "TIMEZONE")
    locale=$(nds_configurator_config_get "LOCALE_MAIN")
    keyboard_layout=$(nds_configurator_config_get "KEYBOARD_LAYOUT")
    keyboard_variant=$(nds_configurator_config_get "KEYBOARD_VARIANT")
    
    cat <<EOF
# NDS Bootstrap Overrides - Generated $(date)
{ config, lib, ... }:
{
  networking.hostName = "$hostname";
  time.timeZone = "$timezone";
  i18n.defaultLocale = "$locale";
  
  services.xserver.xkb = {
    layout = "$keyboard_layout";
$([ -n "$keyboard_variant" ] && echo "    variant = \"$keyboard_variant\";")
  };
}
EOF
}

# =============================================================================
# GENERATE MAIN CONFIG
# =============================================================================
action_generate_config() {
    local nixos_version
    nixos_version=$(nixos-version | cut -d. -f1-2)
    
    cat <<EOF
# Generated by NDS Bootstrap - $(date)
{ config, lib, pkgs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ./nds_overrides.nix
    ./deployVM.nix
  ];
  
  system.stateVersion = "$nixos_version";
}
EOF
}

# =============================================================================
# MAIN WORKFLOW
# =============================================================================
action_setup() {
    # Set action config paths
    NDS_ACTION_CONFIG_FILE="deployVM.nix"
    NDS_ACTION_CONFIG_SOURCE="$(dirname "$0")/nixosConfiguration/deployVM.nix"
    
    # Description
    console "This will install a Deploy VM for managing NixOS nodes and include the following features:"
    console "  • Deployment tools (nixos-anywhere, deploy-rs)"
    console "  • Container management (Docker)"
    console "  • Monitoring tools (Prometheus, Grafana)"
    console "  • Secrets management (age, sops)"
    
    nds_askUserToProceed "Ready to begin configuration?" || exit 130
    
    # Configuration phase - uses all enabled presets from registry
    if ! nds_configurator_validate_all; then
        nds_configurator_prompt_errors
        
        if ! nds_configurator_validate_all; then
            error "Configuration validation failed"
            exit 11
        fi
    fi
    
    # Optional: Show interactive menu
    nds_configurator_menu || exit 12
    
    nds_askUserToProceed "Configuration complete. Ready to install?" || exit 13
    
    # Pre-install phase
    new_section
    section_header "Pre-Install Preparation"
    
    step_start "Generating configurations"
    action_generate_overrides > "$NDS_RUNTIME_DIR/config/nds_overrides.nix"
    action_generate_config > "$NDS_RUNTIME_DIR/config/configuration.nix"
    step_complete "Configurations ready"
    
    step_start "Preparing secrets"
    _prepare_secrets
    step_complete "Secrets prepared"
    
    # Call pre-install hook if exists
    type action_pre &>/dev/null && action_pre
    
    # Install phase
    new_section
    section_header "NixOS Installation"
    nds_nixos_install || exit 14
    
    # Post-install phase
    new_section
    section_header "Post-Install Setup"
    type action_postInstall &>/dev/null && action_postInstall
    
    # Completion
    new_section
    _show_secrets_info
    action_show_completion
    
    console ""
    nds_askUserToProceed "Installation complete. Reboot now?" && reboot
}

# =============================================================================
# HOOKS
# =============================================================================
# action_pre() {
    
# }

# action_postInstall() {
    
# }

# =============================================================================
# CUSTOM FUNCTIONS
# =============================================================================
install_deploy_tools() {
    section_header "Installing Deploy Tools"
    
    local admin_user deploy_tools_src deploy_tools_dest
    admin_user=$(nds_configurator_config_get "ADMIN_USER")
    
    local script_dir
    script_dir="$(dirname "$(realpath "$0")")"
    deploy_tools_src="${script_dir}/deployTools"
    deploy_tools_dest=$(nds_configurator_config_get "DEPLOY_TOOLS_PATH")
    
    # Expand tilde to actual home path
    deploy_tools_dest="${deploy_tools_dest/#\~//home/${admin_user}}"
    
    step_start "Copying deploy tools to $deploy_tools_dest"
    
    if [[ ! -d "$deploy_tools_src" ]]; then
        warn "Deploy tools source not found: $deploy_tools_src"
        return 1
    fi
    
    # Create destination on mounted filesystem
    local mnt_dest="/mnt${deploy_tools_dest}"
    mkdir -p "$mnt_dest"
    
    # Copy tools
    if ! cp -r "$deploy_tools_src"/* "$mnt_dest/"; then
        step_fail "Failed to copy deploy tools"
        return 1
    fi
    
    # Set ownership
    chown -R 1000:1000 "$mnt_dest" 2>/dev/null || true
    
    step_complete "Deploy tools installed"
    success "Deploy tools installed to: $deploy_tools_dest"
    return 0
}

# =============================================================================
# COMPLETION MESSAGE
# =============================================================================
action_show_completion() {
    console ""
    console "╭─────────────────────────────────────────────╮"
    console "│  Deploy VM Installation Complete! 🎉        │"
    console "╰─────────────────────────────────────────────╯"
    console ""
    console "Next steps:"
    console "  1. Reboot into installed system"
    console "  2. Login as admin (check secrets for password)"
    console "  3. SSH key will be auto-generated on first boot"
    console "  4. Clone your private repo and begin deploying"
    console ""
}

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

# Prepare secrets in runtime directory
_prepare_secrets() {
    # Admin password
    local admin_pass
    admin_pass=$(openssl rand -base64 16)
    echo "$admin_pass" > "$NDS_RUNTIME_DIR/secrets/admin_initial_password.txt"
    
    # Move encryption key if exists
    if [[ -f /tmp/luks_key.txt ]]; then
        mv /tmp/luks_key.txt "$NDS_RUNTIME_DIR/secrets/"
    fi
    
    # Create secrets.env
    cat > "$NDS_RUNTIME_DIR/secrets/secrets.env" <<EOF
ADMIN_INITIAL_PASSWORD=$admin_pass
GIT_REPO_URL=$(nds_configurator_config_get "GIT_REPO_URL")
EOF
    
    chmod 600 "$NDS_RUNTIME_DIR/secrets/"*
}

# Show secrets backup information
_show_secrets_info() {
    section_header "🔐 Secrets Backup Required"
    console ""
    console "Location: $NDS_RUNTIME_DIR/secrets/"
    console ""
    console "⚠️  CRITICAL: Back up these files before rebooting!"
    console ""
    
    if [[ -f "$NDS_RUNTIME_DIR/secrets/luks_key.txt" ]]; then
        console "   • Encryption key"
    fi
    console "   • Admin initial password"
    console "   • Environment variables"
    console ""
}
